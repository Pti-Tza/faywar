# Project Intelligence

[Patterns]
- Don't use EventBus, use instances instead, example
    (static var instance : BattleController
    
    func _init() -> void:
    instance=self
    )
- Don't couple UI Logic and Game Logic

- Decouple script into data and handler in case of Unit Components, abulities, and pilots


[Component Naming]
- Use _handler suffix for runtime components
- _data suffix for resource definitions

[Signal Convention]
- Past tense for completed actions
- Present tense for state changes

[Damage Propagation]
1. AttackSystem -> UnitHandler
2. UnitHandler -> SectionHandler
3. SectionHandler -> ComponentHandler

[Action Handling]
- All game actions in Combat scenes flow through BattleController 
- Controllers only emit actions, never execute directly
- Action happens in BattleController

Communication and Problem-Solving:Code Quality and Best Practices:Paradigms and Principles:Semantic Naming and Abstractions:Platform Thinking: If you need clarification on any part of the task, ask for more information before proceeding with the implementation.


# documentation_standards
purpose: "Maintain clarity and consistency in project documentation."
details:
  - "Write clear and concise comments for all significant sections of code."
  - "Use **one set of triple quotes** for docstrings to prevent syntax errors and ensure consistency."
  - "Document the purpose and expected behavior of functions, modules, and important classes."

