# Project Intelligence

[Patterns]
- Don't use EventBus, use instances instead, example
    (static var instance : BattleController
    
    func _init() -> void:
    instance=self
    )
- Don't couple UI Logic and Game Logic

- BattleController is Sole System Operator

    1. Only BattleController should directly call MovementSystem/AttackSystem methods

    2. Maintains turn state validation

    3. Handles action sequencing

    4. Controllers are Decision Makers

- Use Mediator Pattern to handle decoupled UI and Game Logic

[Action Handling]
1. Never reference UnitHandler directly in UI
2. Use UUIDs for all controller-unit interactions
3. Log entries must contain raw data + formatted text

[Security]
1. Triple-layer turn validation:
   - Instance validity
   - Data structure check
   - UUID ownership

[Component Naming]
- Use _handler suffix for runtime components
- _data suffix for resource definitions

[Signal Convention]
- Past tense for completed actions
- Present tense for state changes

[Damage Propagation]
1. AttackSystem -> UnitHandler
2. UnitHandler -> SectionHandler
3. SectionHandler -> ComponentHandler

[AI Priorities]
- Berserker: Always closes distance
- Sniper: Prefers elevation advantage

[Testing Rules]
- Validate all 2D6 rolls against histogram
- Test movement costs at max grid range

[Action Handling]
- All game actions in Combat scenes flow through BattleController 
- Controllers only emit actions, never execute directly
- Action validation happens in BattleController